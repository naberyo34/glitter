/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/user/{id}/inbox": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * アクションに対する応答
         * @description 外部からInbox宛に通知されたアクションに対して応答を行います。
         */
        post: operations["receiveInbox"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/me/icon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * アイコン画像の更新
         * @description アイコン画像を更新します。ログインが必須です。成功時はアイコン画像のパス情報を含む userDto を返します。
         */
        post: operations["updateIcon"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 投稿の追加
         * @description セッションユーザーの新規投稿を追加します。
         */
        post: operations["addPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ログイン JWT トークンの取得
         * @description ユーザー ID とパスワードを照合し、ログインに成功した場合は JWT トークンを返却します。
         */
        post: operations["token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * IDからユーザーを取得
         * @description IDからユーザーを取得します。Acceptヘッダーが application/activity+json の場合はActivityPub Actor形式でJSONを返します。
         */
        get: operations["findById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ユーザーの投稿を全件取得
         * @description ユーザーの投稿を全件取得します。ユーザー自体が存在しない場合は404、ユーザーが1件も投稿を持たない場合は空配列を返します。
         */
        get: operations["getUserPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/outbox": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ユーザーのOutboxを取得
         * @description ユーザーの投稿をActivityPubのOutbox形式で取得します。ActivityPub準拠のクライアントからのリクエスト用です。
         */
        get: operations["getOutbox"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ユーザーのフォロー一覧を取得
         * @description 指定したユーザーがフォローしているユーザー一覧を取得します。
         */
        get: operations["getFollowing"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ユーザーのフォロワー一覧を取得
         * @description 指定したユーザーをフォローしているユーザー一覧を取得します。Acceptヘッダーが application/activity+json の場合はActivityPub OrderedCollection形式でJSONを返します。
         */
        get: operations["getFollowers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * セッションユーザーを取得
         * @description セッションユーザーを取得します。ログインしていない場合は 401 が返ります。通常発生しませんが、ログインしているにもかかわらずユーザーのデータが見つからない場合、404 ではなく null を返します。
         */
        get: operations["getSessionUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/me/post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * セッションユーザーの投稿を取得
         * @description セッションユーザーの投稿を取得します。ログインしていない場合は 401 が返ります。
         */
        get: operations["getMyPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/me/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * セッションユーザーのフォロー一覧を取得
         * @description セッションユーザーがフォローしているユーザー一覧を取得します。
         */
        get: operations["getMyFollowing"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/me/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * セッションユーザーのフォロワー一覧を取得
         * @description セッションユーザーをフォローしているユーザー一覧を取得します。
         */
        get: operations["getMyFollowers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/post/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * IDから投稿を取得
         * @description IDからユーザー情報を含む投稿を取得します。Acceptヘッダーが application/activity+json の場合はActivityPub Note形式でJSONを返します。
         */
        get: operations["findById_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nodeinfo/2.1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * NodeInfo を取得する
         * @description ActivityPub 向けに NodeInfo の実体を返します。
         */
        get: operations["getNodeInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/.well-known/webfinger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * WebFinger の応答を取得する
         * @description ActivityPub 向けに WebFinger リソースを提供します。acct:username@domain 形式のリソースパラメータが必要です。
         */
        get: operations["getWebFinger"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/.well-known/nodeinfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * NodeInfo の通信先を取得する
         * @description ActivityPub 向けに NodeInfo に対応していること、その通信先を返します。
         */
        get: operations["getNodeInfoDiscovery"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/.well-known/host-meta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * WebFinger の通信先を取得する
         * @description ActivityPub 向けに WebFinger に対応していること、その通信先を返します。
         */
        get: operations["getHostMeta"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ProblemDetail: {
            /** Format: uri */
            type?: string;
            title?: string;
            /** Format: int32 */
            status?: number;
            detail?: string;
            /** Format: uri */
            instance?: string;
            properties?: {
                [key: string]: Record<string, never>;
            };
        };
        JsonNode: Record<string, never>;
        UserDto: {
            /**
             * @description ユーザー ID
             * @example example
             */
            userId: string;
            /**
             * @description ユーザーのドメイン
             * @example example.com
             */
            domain: string;
            /**
             * @description ユーザーの Actor URL
             * @example https://example.com/user/example
             */
            actorUrl: string;
            /**
             * @description ユーザー名
             * @example 太郎
             */
            username: string;
            /**
             * @description プロフィール
             * @example こんにちは。
             */
            profile?: string;
            /**
             * @description プロフィールアイコン
             * @example /test_user/example.jpg
             */
            icon?: string;
        };
        PostDto: {
            /**
             * @description 投稿 uuid
             * @example uuid
             */
            uuid: string;
            /**
             * @description ユーザー ID
             * @example example
             */
            userId: string;
            /**
             * @description ユーザーのドメイン
             * @example example.com
             */
            domain: string;
            /**
             * @description 本文
             * @example がんばります。
             */
            content: string;
            /**
             * Format: date-time
             * @description 投稿日時
             * @example 2025-03-10T08:14:12.451+00:00
             */
            createdAt: string;
        };
        PostRequest: {
            /**
             * @description 本文
             * @example がんばります。
             */
            content: string;
        };
        JwtTokenDto: {
            /**
             * @description JWT トークン
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
             */
            token: string;
        };
        UserIdentity: {
            /**
             * @description ユーザー ID
             * @example example
             */
            id: string;
            /**
             * @description パスワード
             * @example $2a$12$Z3MQA08C1d8S89U7nA0/1eMMxRw061BKTZHl.OlGzZjFMLQs6FC3y
             */
            password: string;
        };
        Actor: {
            /**
             * @description Person
             * @example Person
             */
            type: string;
            /**
             * @description オブジェクトのID
             * @example https://example.com/user/test_user/object/123
             */
            id: string;
            /**
             * @description ユーザー ID
             * @example test_user
             */
            preferredUsername: string;
            /**
             * @description 表示名
             * @example テストユーザー
             */
            name: string;
            /**
             * @description プロフィール
             * @example こんにちは。
             */
            summary: string;
            /**
             * @description Inbox の URL
             * @example https://example.com/user/test_user/inbox
             */
            inbox: string;
            /**
             * @description outbox の URL
             * @example https://example.com/user/test_user/outbox
             */
            outbox: string;
            /** @description アイコン画像 */
            icon?: components["schemas"]["Icon"];
            /**
             * @description 外部からのインデックスを許可するか。これが true でない場合 Misskey が認識しないらしい
             * @example true
             */
            discoverable: boolean;
            /** @description アクターの公開鍵情報 */
            publicKey: components["schemas"]["PublicKey"];
            /**
             * @description コンテキスト
             * @example https://www.w3.org/ns/activitystreams
             */
            "@context": string;
        };
        Icon: {
            /**
             * @description アイコン画像の MIME タイプ
             * @example Image
             */
            type: string;
            /**
             * @description アイコン画像の URL
             * @example https://example.com/bucketName/test_user/icon.jpg
             */
            url: string;
        };
        PublicKey: {
            /**
             * @description 公開鍵の ID
             * @example https://example.com/user/test_user#main-key
             */
            id: string;
            /**
             * @description 公開鍵のオーナー
             * @example https://example.com/user/test_user
             */
            owner: string;
            /**
             * @description 公開鍵の値
             * @example -----BEGIN PUBLIC KEY-----
             *     ...
             *     -----END PUBLIC KEY-----
             *
             */
            publicKeyPem: string;
        };
        PostWithAuthor: {
            /**
             * @description 投稿 uuid
             * @example uuid
             */
            uuid: string;
            /**
             * @description ユーザー ID
             * @example example
             */
            userId: string;
            /**
             * @description ユーザーのドメイン
             * @example example.com
             */
            domain: string;
            /**
             * @description 本文
             * @example がんばります。
             */
            content: string;
            /**
             * Format: date-time
             * @description 投稿日時
             * @example 2025-03-10T08:14:12.451+00:00
             */
            createdAt: string;
            /** @description ユーザー情報 */
            user: components["schemas"]["UserDto"];
        };
        OrderedCollection: {
            /**
             * @description オブジェクトのタイプ
             * @example OrderedCollection
             */
            type: string;
            /**
             * @description オブジェクトのID
             * @example https://example.com/user/test_user/object/123
             */
            id: string;
            /**
             * Format: int32
             * @description アイテムの総数
             * @example 42
             */
            totalItems: number;
            /** @description アイテムの配列 */
            orderedItems?: Record<string, never>[];
            /**
             * @description コンテキスト
             * @example https://www.w3.org/ns/activitystreams
             */
            "@context": string;
        };
        Note: {
            /**
             * @description オブジェクトのタイプ
             * @example Note
             */
            type: string;
            /**
             * @description オブジェクトのID
             * @example https://example.com/user/test_user/object/123
             */
            id: string;
            /**
             * @description ノートの内容
             * @example こんにちは。
             */
            content: string;
            /**
             * @description ノートの公開日時
             * @example 2025-04-29T12:34:56Z
             */
            published: string;
            /**
             * @description ノートの作成者のActor Endpoint
             * @example https://example.com/user/test_user
             */
            attributedTo: string;
            /**
             * @description ノートの公開範囲
             * @example https://www.w3.org/ns/activitystreams#Public
             */
            to: string[];
            /**
             * @description ノートの cc (フォロワー)
             * @example https://example.com/user/test_user/followers
             */
            cc: string;
            /**
             * @description コンテキスト
             * @example https://www.w3.org/ns/activitystreams
             */
            "@context": string;
        };
        /** @description アクターエンドポイントを含むリンクの情報 */
        Link: {
            /**
             * @description self
             * @example self
             */
            rel: string;
            /**
             * @description application/activity+json
             * @example application/activity+json
             */
            type: string;
            /**
             * @description アクターエンドポイント
             * @example https://example.com/user/test_user
             */
            href: string;
        };
        WebFingerResponse: {
            /**
             * @description acct (アクターエンドポイントを取得するために使う)
             * @example acct:example@example.com
             */
            subject: string;
            links?: components["schemas"]["Link"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    receiveInbox: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JsonNode"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description 未対応のアクションが通知されたとき */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
            /** @description アクションの処理が何らかの理由で失敗したとき */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    updateIcon: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            /** @description ログインしていないとき */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
            /** @description 画像のアップロードに失敗したとき */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    addPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostDto"];
                };
            };
            /** @description 認証に失敗したかセッションユーザーを取得できなかった場合 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
            /** @description 何らかの理由で投稿に失敗した場合 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    token: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserIdentity"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JwtTokenDto"];
                };
            };
            /** @description 認証に失敗した場合 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                    "application/activity+json": components["schemas"]["Actor"];
                };
            };
            /** @description ユーザーが見つからないとき */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    getUserPosts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostWithAuthor"][];
                };
            };
            /** @description ユーザーが見つからないとき */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    getOutbox: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/activity+json": components["schemas"]["OrderedCollection"];
                };
            };
            /** @description ユーザーが見つからないとき */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    getFollowing: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"][];
                };
            };
            /** @description ユーザーが見つからない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    getFollowers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"][];
                    "application/activity+json": components["schemas"]["OrderedCollection"];
                };
            };
            /** @description ユーザーが見つからない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    getSessionUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            /** @description ログインしていないとき */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    getMyPosts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostWithAuthor"][];
                };
            };
            /** @description ログインしていないとき */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    getMyFollowing: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"][];
                };
            };
            /** @description 認証エラー */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    getMyFollowers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"][];
                };
            };
            /** @description 認証エラー */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    findById_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostWithAuthor"];
                    "application/activity+json": components["schemas"]["Note"];
                };
            };
            /** @description 投稿が見つからないとき */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    getNodeInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getWebFinger: {
        parameters: {
            query: {
                resource: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/jrd+json": components["schemas"]["WebFingerResponse"];
                };
            };
            /** @description リソースパラメータが不正または存在しない場合 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
            /** @description 指定されたユーザーが見つからない場合 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetail"];
                };
            };
        };
    };
    getNodeInfoDiscovery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getHostMeta: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
